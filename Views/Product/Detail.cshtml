@using System.Text.Json
@section title {
        Product - eElectronics - HTML eCommerce Template
}
@section css {
}
@section subtitle {
    <div class="product-big-title-area">
        <div class="container">
            <div class="row">
                <div class="col-md-12">
                    <div class="product-bit-title text-center">
                        <h2>Product</h2>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
<div class="single-product-area">
    <div class="zigzag-bottom"></div>
    <div class="container">
        <div class="row">
            <div class="col-md-4">
                <div class="single-sidebar">
                    @await Html.PartialAsync("~/Views/Shared/Partials/User/Product/_Search.cshtml")
                </div>
                <div class="single-sidebar">
                    @await Html.PartialAsync("~/Views/Shared/Partials/User/Product/_List-Product.cshtml")
                </div>
                <div class="single-sidebar">
                    @await Html.PartialAsync("~/Views/Shared/Partials/User/Product/_Recent-Posts.cshtml")
                </div>
            </div>

            <div class="col-md-8" id="product-detail-container">
                <div class="product-content-right">
                    <div class="product-breadcroumb" id="detail-breadcrumb">
                        <span id="breadcrumb-home-placeholder"></span>
                        <span id="breadcrumb-category-placeholder"></span>
                        <span id="breadcrumb-product-name-placeholder"></span>
                    </div>

                    <div id="single-product-content">
                    </div>

                    @await Html.PartialAsync("~/Views/Shared/Partials/User/Product/_Related-Products.cshtml")
                </div>
            </div>
        </div>
    </div>
</div>

@section js {
    <script>
        $(document).ready(function () {
            const formatCurrency = (amount) => {
                const amountValue = parseFloat(amount) || 0;
                const formatter = new Intl.NumberFormat('vi-VN', {
                    style: 'currency',
                    currency: 'VND',
                    minimumFractionDigits: 0
                });
                return formatter.format(amountValue).replace("₫", " VNĐ").trim();
            };

            const currentProductId = parseInt('@(ViewContext.RouteData.Values["id"]?.ToString())') || null;

            if (!currentProductId || currentProductId === 'null') {
                $('#single-product-content').html('<h2>Sản phẩm không tồn tại hoặc ID không hợp lệ.</h2>');
                return;
            }

            const renderProductDetail = (p) => {
                let finalPrice = p.price * (1 - p.discount);
                let finalPriceFormatted = formatCurrency(finalPrice);
                let priceFormatted = formatCurrency(p.price);

                let priceHtml = '';
                if (p.discount > 0) {
                    priceHtml = `<ins>${finalPriceFormatted}</ins><del>${priceFormatted}</del>`;
                } else {
                    priceHtml = `<ins>${priceFormatted}</ins>`;
                }

                // const categoryName = "Electronics";

                $('#breadcrumb-home-placeholder').html(`<a href="/">Home</a>`);
                $('#breadcrumb-category-placeholder').html(`&nbsp;/&nbsp;<a href="#">${p.categoryName}</a>`);
                $('#breadcrumb-product-name-placeholder').html(`&nbsp;/&nbsp;<a href="/product/detail/${p.id}">${p.productName}</a>`);

                let images = [];
                if (p.imageList && Array.isArray(p.imageList) && p.imageList.length > 0) {
                    images = p.imageList;
                } else if (p.images && Array.isArray(p.images) && p.images.length > 0) {
                    images = p.images;
                } else if (typeof p.image === "string" && p.image.includes(";")) {
                    images = p.image.split(";").map(x => x.trim());
                } else if (typeof p.image === "string" && p.image.trim() !== "") {
                    images = [p.image.trim()];
                } else {
                    images = ["/img/no-image.jpg"];
                    console.warn("No valid image data found, using default: /img/no-image.jpg");
                }

                let mainImage = images.length > 0 ? images[0] : "/img/no-image.jpg";
                let thumbnails = images.map(img => `
                    <div class="col-xs-3 mb-2">
                        <img src="${img}" alt="${p.productName}"
                             class="img-thumbnail thumb-image"
                             style="cursor:pointer; transition:0.2s; max-height:80px; object-fit: cover; width: 100%; height: 80px;">
                    </div>
                `).join('');

                return `
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="product-images">
                                <div class="product-main-img">
                                    <img id="main-product-img" src="${mainImage}" alt="${p.productName}"class="img-fluid rounded shadow" style="width: 100%; height: 400px; object-fit: cover;">
                                </div>
                                <div class="row mt-3">
                                    ${thumbnails}
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="product-inner">
                                <h2 class="product-name">${p.productName}</h2>
                                <div class="product-inner-price">
                                    ${priceHtml}
                                </div>
                                <form action="#" class="cart">
                                    <div class="quantity">
                                        <input type="number" size="4" class="input-text qty text" title="Qty" value="1" name="quantity" min="1" step="1">
                                    </div>
                                    <button class="add_to_cart_button" type="submit">Add to cart</button>
                                </form>
                                <div class="product-inner-category">
                                    <p>Category: <a href="#">${p.categoryName}</a></p>
                                </div>
                                <div role="tabpanel">
                                    <ul class="product-tab" role="tablist">
                                        <li role="presentation" class="active">
                                            <a href="#home" aria-controls="home" role="tab" data-toggle="tab">Description</a>
                                        </li>
                                        <li role="presentation">
                                            <a href="#profile" aria-controls="profile" role="tab" data-toggle="tab">Reviews</a>
                                        </li>
                                    </ul>
                                    <div class="tab-content">
                                        <div role="tabpanel" class="tab-pane fade in active" id="home">
                                            <h2>Product Description</h2>
                                            <p>${p.description || "Không có mô tả."}</p>
                                        </div>
                                        <div role="tabpanel" class="tab-pane fade" id="profile">
                                            <h2>Reviews</h2>
                                            <div class="submit-review">
                                                <p><label for="name">Name</label> <input name="name" type="text"></p>
                                                <p><label for="email">Email</label> <input name="email" type="email"></p>
                                                <div class="rating-chooser">
                                                    <p>Your rating</p>
                                                    <div class="rating-wrap-post">
                                                        <i class="fa fa-star"></i>
                                                        <i class="fa fa-star"></i>
                                                        <i class="fa fa-star"></i>
                                                        <i class="fa fa-star"></i>
                                                        <i class="fa fa-star"></i>
                                                    </div>
                                                </div>
                                                <p><label for="review">Your review</label>
                                                    <textarea name="review" cols="30" rows="10"></textarea></p>
                                                <p><input type="submit" value="Submit"></p>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            };

            const loadProductDetail = (productId) => {
                $.ajax({
                    url: `/api/products/${productId}`,
                    type: 'GET',
                    dataType: 'json',
                    success: function (product) {
                        console.log("API Response:", product); // Log để debug
                        if (product) {
                            const html = renderProductDetail(product);
                            $('#single-product-content').html(html);
                            $(document).on('click', '.thumb-image', function () {
                                const src = $(this).attr('src');
                                $('#main-product-img').attr('src', src);
                            });
                        } else {
                            $('#single-product-content').html('<h2>Sản phẩm không tồn tại.</h2>');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX Error:", error); // Log lỗi AJAX
                        $('#single-product-content').html('<h2>Có lỗi xảy ra khi tải dữ liệu.</h2>');
                    }
                });
            };

            // Tạo và render phần Sidebar (List Product)
            const renderSidebarProduct = (p) => {
                const priceValue = parseFloat(p.price) || 0;
                const discountValue = parseFloat(p.discount) || 0;
                let finalPrice = priceValue * (1 - discountValue);
                let finalPriceFormatted = formatCurrency(finalPrice);
                let priceFormatted = formatCurrency(p.price);

                let priceHtml = p.discount > 0
                    ? `<ins>${finalPriceFormatted}</ins><del>${priceFormatted}</del>`
                    : `<ins>${priceFormatted}</ins>`;

                // Tách chuỗi image và lấy ảnh đầu tiên
                let mainImage = "/img/no-image.jpg";
                if (typeof p.image === "string" && p.image.trim() !== "") {
                    const images = p.image.split(";").map(x => x.trim());
                    mainImage = images.length > 0 ? `/img/${images[0]}` : mainImage;
                }

                return `
                    <div class="thubmnail-recent">
                        <img src="${mainImage}" class="recent-thumb" alt="${p.productName}">
                        <h2><a href="/product/detail/${p.id}">${p.productName}</a></h2>
                        <div class="product-sidebar-price">
                            ${priceHtml}
                        </div>
                    </div>
                `;
            };

            const loadSidebarProducts = () => {
                $.ajax({
                    url: '@Url.Content("~/api/products")',
                    method: 'GET',
                    dataType: 'json',
                    success: function (products) {
                        let htmlContent = '';
                        products.slice(0, 3).forEach(p => {
                            htmlContent += renderSidebarProduct(p);
                        });

                        $('#latest-products-container').html(htmlContent);
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi khi tải sản phẩm cho sidebar:', error);
                        $('#latest-products-container').html('<p>Không thể tải sản phẩm mới nhất.</p>');
                    }
                });
            };

            // Tạo và render phần RecentPost
            const renderRecentPost = (p) => {
                return `
                    <li>
                        <a href="/product/detail/${p.id}">${p.productName}</a>
                    </li>
                `;
            };

            const loadRecentPosts = () => {
                $.ajax({
                    url: '@Url.Content("~/api/products")',
                    method: 'GET',
                    dataType: 'json',
                    success: function (items) {
                        let htmlContent = '<ul>';
                        items.slice(0, 5).forEach(item => {
                            htmlContent += renderRecentPost(item);
                        });
                        htmlContent += '</ul>';

                        $('#recent-posts-container').html(htmlContent);
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi khi tải bài viết gần đây:', error);
                        $('#recent-posts-container').html('<ul><li>Không thể tải bài viết.</li></ul>');
                    }
                });
            };

            // Tạo và render phần RelatedProduct
            const renderRelatedProduct = (p) => {
                const priceValue = parseFloat(p.price) || 0;
                const discountValue = parseFloat(p.discount) || 0;
                let finalPrice = priceValue * (1 - discountValue);
                let finalPriceFormatted = formatCurrency(finalPrice);
                let priceFormatted = formatCurrency(p.price);

                let priceHtml = p.discount > 0
                    ? `<ins>${finalPriceFormatted}</ins><br/><del>${priceFormatted}</del>`
                    : `<ins>${priceFormatted}</ins>`;

                // Tách chuỗi image và lấy ảnh đầu tiên
                let mainImage = "/img/no-image.jpg";
                if (typeof p.image === "string" && p.image.trim() !== "") {
                    const images = p.image.split(";").map(x => x.trim());
                    mainImage = images.length > 0 ? `/img/${images[0]}` : mainImage;
                }

                return `
                    <div class="single-product">
                        <div class="product-f-image" style="height: 270px; overflow: hidden; display: block;">
                            <img src="${mainImage}" alt="" style="width: 100%; height: 100%; object-fit: contain;">
                        </div>
                        <h2><a href="/product/detail/${p.id}">${p.productName}</a></h2>
                        <div class="product-carousel-price">
                            ${priceHtml}
                        </div>
                    </div>
                `;
            };

            const loadRelatedProducts = () => {
                const $carousel = $('#related-products-container');

                $.ajax({
                    url: '@Url.Content("~/api/products")',
                    method: 'GET',
                    dataType: 'json',
                    success: function (products) {
                        let htmlContent = '';
                        products.filter(p => p.id !== currentProductId).slice(0, 6).forEach(p => {
                            htmlContent += renderRelatedProduct(p);
                        });

                        $carousel.html(htmlContent);

                        if ($carousel.hasClass('owl-loaded')) {
                            $carousel.trigger('destroy.owl.carousel');
                        }

                        $carousel.owlCarousel({
                            loop: true,
                            nav: true,
                            margin: 20,
                            responsiveClass: true,
                            responsive: {
                                0: { items: 1, nav: true },
                                600: { items: 3, nav: false },
                                1000: { items: 4, nav: true, loop: false }
                            }
                        });
                    },
                    error: function (xhr, status, error) {
                        console.error('Lỗi khi tải sản phẩm liên quan:', error);
                        $carousel.html('<p>Không thể tải sản phẩm liên quan.</p>');
                    }
                });
            };

            loadSidebarProducts();
            loadRecentPosts();
            loadRelatedProducts();
            loadProductDetail(currentProductId);
        });
    </script>
}